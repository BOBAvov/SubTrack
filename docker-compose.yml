version: '3.8'

services:
  # Сервис вашего Go-приложения
  app:
    # Указываем Docker собирать образ из текущей директории
    build: .
    # Имя контейнера для удобства
    container_name: subtrack_app
    # Перезапускать контейнер в случае сбоя
    restart: always
    # Пробрасываем порты: 8080 хоста на 8080 контейнера
    ports:
      - "8080:8080"
    # Зависит от сервиса базы данных. Приложение запустится только после старта БД.
    depends_on:
      - db
    # Передаем переменные окружения, если нужно (здесь не требуется, т.к. viper читает файл)

  # Сервис базы данных PostgreSQL
  db:
    # Используем официальный образ PostgreSQL
    image: postgres:14-alpine
    container_name: subtrack_db
    restart: always
    # Переменные для инициализации БД: пользователь, пароль, имя БД
    # ВАЖНО: они должны совпадать с вашим configs/config.yaml,
    # но хост здесь будет 'db', а не 'localhost'.
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty
      POSTGRES_DB: postgres
    # Пробрасываем порты, чтобы можно было подключиться к БД с хост-машины (например, для миграций)
    ports:
      - "5436:5432" # 5432 - стандартный порт Postgres в контейнере
    # Сохраняем данные БД на хост-машине, чтобы они не терялись при перезапуске контейнера
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

# Docker создаст сеть 'default', в которой сервисы смогут общаться по именам ('app' и 'db')